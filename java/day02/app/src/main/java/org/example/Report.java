/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;

public class Report {
    private List<Integer> levels;

    Report(String reportSummary) {
        levels = Arrays.stream(reportSummary.split(" ")).map(Integer::parseInt).toList();
    }

    Report(List<Integer> levels) {
        this.levels = levels;
    }

    public boolean isReportSafe() {
        Integer currentLevel = levels.get(0);
        Integer nextLevel = levels.get(1);

        boolean isIncreasing = nextLevel > currentLevel;

        for (int i = 0; i < levels.size() - 1; i++) {
            currentLevel = levels.get(i);
            nextLevel = levels.get(i + 1);

            if (Math.abs(currentLevel - nextLevel) > 3 || currentLevel.equals(nextLevel)) {
                return false;
            }

            if (isIncreasing && nextLevel <= currentLevel) {
                return false;
            }

            if (!isIncreasing && nextLevel >= currentLevel) {
                return false;
            }
        }

        return true;
    }

    public boolean isReportSafeWithARemoval() {
        if (this.isReportSafe()){
            return true;
        }

        for (int i = 0; i < levels.size(); i++) {
            List<Integer> newLevels = new ArrayList<>(levels);
            newLevels.remove(i);

            Report newReport = new Report(newLevels);

            if (newReport.isReportSafe()) {
                return true;
            }
        }

        return false;
    }

    Boolean isGapTooBigOrEqual(Integer firstIndex, Integer secondIndex) {
        Integer currentLevel = levels.get(firstIndex);
        Integer nextLevel = levels.get(secondIndex);

        return Math.abs(currentLevel - nextLevel) > 3 || currentLevel.equals(nextLevel);
    }

    Boolean areReportsStillIncreasing(Integer firstIndex, Integer secondIndex) {
        Integer currentLevel = levels.get(firstIndex);
        Integer nextLevel = levels.get(secondIndex);

        return nextLevel > currentLevel;
    }

    Boolean areReportsStillDecreasing(Integer firstIndex, Integer secondIndex) {
        Integer currentLevel = levels.get(firstIndex);
        Integer nextLevel = levels.get(secondIndex);

        return nextLevel < currentLevel;
    }

    Boolean areReportsSafe(Boolean isIncreasing, Integer firstIndex, Integer secondIndex) {
        if (isGapTooBigOrEqual(firstIndex, secondIndex)) {
            return false;
        }

        if (isIncreasing && areReportsStillDecreasing(firstIndex,secondIndex)){
            return false;
        }

        if (!isIncreasing && areReportsStillIncreasing(firstIndex,secondIndex)){
            return false;
        }

        return true;
    }
}
